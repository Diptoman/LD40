<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_row = -1;
_column = -1;
_in = "";
_out = "";
_outPoint = -1;
_inPoint = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(_outPoint))
    _outPoint._in = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (_inPoint._outPoint != -1)
    {
        _inPoint._outPoint = -1;
        _inPoint._out = "";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(_outPoint))
{
    draw_set_color(c_blue);
    var i, scale;
    
    //X
    if (x != _outPoint.x)
    {
        if (x &gt; _outPoint.x)
        {
            rotate = 180;
            for(i = x - obj_control._gridSize / 2; i &gt; _outPoint.x; i -= obj_control._gridSize)
            {
                draw_sprite_ext(spr_line, 0, i, y, 1, 1, rotate, c_white, 1);
            }
        }
        else
        {
            rotate = 0;
            for(i = x + obj_control._gridSize / 2; i &lt; _outPoint.x; i += obj_control._gridSize)
            {
                draw_sprite_ext(spr_line, 0, i, y, 1, 1, rotate, c_white, 1);
            }
        }       
    }
    
    //Y
    if (y != _outPoint.y)
    {
        if (y &gt; _outPoint.y)
        {
            rotate = 90;
            for(i = y - obj_control._gridSize / 2; i &gt; _outPoint.y; i -= obj_control._gridSize)
            {
                draw_sprite_ext(spr_line, 0, x, i, 1, 1, rotate, c_white, 1);
            }
        }
        else
        {
            rotate = -90;
            for(i = y + obj_control._gridSize / 2; i &lt; _outPoint.y; i += obj_control._gridSize)
            {
                draw_sprite_ext(spr_line, 0, x, i, 1, 1, rotate, c_white, 1);
            }
        }       
    }
}
else
{
    if (_inPoint._outPoint != -1)
    {
        
        if (alarm[0] &lt; 0)
        {
            alarm[0] = 2;
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

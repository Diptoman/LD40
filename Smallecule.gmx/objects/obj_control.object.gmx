<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grid data
_gridColumns = 16;
_gridRows = 12;
_gridSize = 48;
_gridOffsetX = 48;
_gridOffsetY = 96;

//Mouse
_currentRow = -1;
_currentColumn = -1;
_isDraggingPath = false;

//Path point
_currentPathPoint = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn data
_turnTimer = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place 2nd path point
if (_currentRow &gt; -1) &amp;&amp; (_currentColumn &gt; -1)
{
    current2ndPathPoint = collision_rectangle(_gridOffsetX + _currentColumn*_gridSize, _gridOffsetY + _currentRow*_gridSize, _gridOffsetX + (_currentColumn + 1)*_gridSize, _gridOffsetY + (_currentRow + 1)*_gridSize, obj_pathPoint, false, false)
    
    if (_currentPathPoint &gt; 0) //Path is being dragged from a point
    {
        if ((_currentColumn == _currentPathPoint._column) || (_currentRow == _currentPathPoint._row)) //If it's a valid path
        {
            if (current2ndPathPoint &lt;= 0) //There is no existing path point
            {
                current2ndPathPoint = instance_create(_gridOffsetX + (_currentColumn + .5)*_gridSize, _gridOffsetY + (_currentRow + .5)*_gridSize, obj_pathPoint);
                current2ndPathPoint._row = _currentRow;
                current2ndPathPoint._column = _currentColumn;
                
                //Set in and outs
                var columnDist = current2ndPathPoint._column - _currentPathPoint._column;
                if (columnDist &gt; 0)
                {
                        current2ndPathPoint._in = "left";
                        _currentPathPoint._out = "right";
                        _currentPathPoint._outPoint = current2ndPathPoint;
                        _currentPathPoint.alarm[1] = 1;
                }
                else if (columnDist &lt; 0)
                {
                    current2ndPathPoint._in = "right";
                    _currentPathPoint._out = "left";
                    _currentPathPoint._outPoint = current2ndPathPoint;
                    _currentPathPoint.alarm[1] = 1;
                }
                
                var rowDist = current2ndPathPoint._row - _currentPathPoint._row;
                if (rowDist &gt; 0)
                {
                        current2ndPathPoint._in = "up";
                        _currentPathPoint._out = "down";
                        _currentPathPoint._outPoint = current2ndPathPoint;
                        _currentPathPoint.alarm[1] = 1;
                }
                else if (rowDist &lt; 0)
                {
                    current2ndPathPoint._in = "down";
                    _currentPathPoint._out = "up";
                    _currentPathPoint._outPoint = current2ndPathPoint;
                    _currentPathPoint.alarm[1] = 1;
                }
                
            }
            else //If there is a point, make sure there is no in
            {
                if (current2ndPathPoint._in == "")
                {
                    //Set in and outs
                    var columnDist = current2ndPathPoint._column - _currentPathPoint._column;
                    if (columnDist &gt; 0)
                    {
                        current2ndPathPoint._in = "left";
                        _currentPathPoint._out = "right";
                        _currentPathPoint._outPoint = current2ndPathPoint;
                        _currentPathPoint.alarm[1] = 1;
                    }
                    else if (columnDist &lt; 0)
                    {
                        current2ndPathPoint._in = "right";
                        _currentPathPoint._out = "left";
                        _currentPathPoint._outPoint = current2ndPathPoint;
                        _currentPathPoint.alarm[1] = 1;
                    }
                
                    var rowDist = current2ndPathPoint._row - _currentPathPoint._row;
                    if (rowDist &gt; 0)
                    {
                        current2ndPathPoint._in = "up";
                        _currentPathPoint._out = "down";
                        _currentPathPoint._outPoint = current2ndPathPoint;
                        _currentPathPoint.alarm[1] = 1;
                    }
                    else if (rowDist &lt; 0)
                    {
                        current2ndPathPoint._in = "down";
                        _currentPathPoint._out = "up";
                        _currentPathPoint._outPoint = current2ndPathPoint;
                        _currentPathPoint.alarm[1] = 1;
                    }
                }
            }
        }
    }
}

_currentPathPoint = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place path point
if (_currentRow &gt; -1) &amp;&amp; (_currentColumn &gt; -1)
{
    _currentPathPoint = collision_rectangle(_gridOffsetX + _currentColumn*_gridSize, _gridOffsetY + _currentRow*_gridSize, _gridOffsetX + (_currentColumn + 1)*_gridSize, _gridOffsetY + (_currentRow + 1)*_gridSize, obj_pathPoint, false, false)
    
    if (_currentPathPoint &lt;= 0)
    {
        _currentPathPoint = instance_create(_gridOffsetX + (_currentColumn + .5)*_gridSize, _gridOffsetY + (_currentRow + .5)*_gridSize, obj_pathPoint);
        _currentPathPoint._column = _currentColumn;
        _currentPathPoint._row = _currentRow;
    }
    else
    {
        if (_currentPathPoint._out != "")
            _currentPathPoint = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw grid
draw_set_color(c_white);
var i, j;
for(i = 0; i &lt; _gridColumns; i++ )
{
    for(j = 0; j &lt; _gridRows; j++ )
    {
        draw_rectangle(_gridOffsetX + i*_gridSize, _gridOffsetY + j*_gridSize, _gridOffsetX + (i + 1)*_gridSize, _gridOffsetY + (j + 1)*_gridSize, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Color mouse grid
var xx, yy;
xx = mouse_x;
yy = mouse_y;


//Row
if ((xx &gt;= _gridOffsetX) &amp;&amp; (xx &lt;= _gridOffsetX + (_gridSize * _gridColumns)))
{
    _currentColumn = floor((xx - _gridOffsetX) / _gridSize);
}
else
{
    _currentColumn = -1;
}

//Column
if ((yy &gt;= _gridOffsetY) &amp;&amp; (yy &lt;= _gridOffsetY + (_gridSize * _gridRows)))
{
    _currentRow = floor((yy - _gridOffsetY) / _gridSize);
}
else
{
    _currentRow = -1;
}

//Draw grid
if (_currentRow &gt; -1) &amp;&amp; (_currentColumn &gt; -1)
{
    draw_set_alpha(.25);
    draw_rectangle(_gridOffsetX + _currentColumn*_gridSize, _gridOffsetY + _currentRow*_gridSize, _gridOffsetX + (_currentColumn + 1)*_gridSize, _gridOffsetY + (_currentRow + 1)*_gridSize, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw path line
if (_currentPathPoint &gt; 0)
{
    if ((_currentColumn == _currentPathPoint._column) || (_currentRow == _currentPathPoint._row)) //If it's a valid path
    {
        draw_set_color(c_blue);
    }
    else
    {
        draw_set_color(c_red);
    }
    draw_line(_currentPathPoint.x, _currentPathPoint.y, mouse_x, mouse_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

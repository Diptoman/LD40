<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_endPoint</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_bondList = ds_list_create();
image_speed = 0.25;
alarm[0] = 1;

_callingEndPoint = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

var i, collEndPoint;
for(i = 0; i &lt; ds_list_size(_bondList); i++)
{
    switch(ds_list_find_value(_bondList, i))
    {
        case "left":
            collEndPoint = collision_point(x - obj_control._gridSize, y, obj_endPoint, 0, 0);
            break;
        case "right":
            collEndPoint = collision_point(x + obj_control._gridSize, y, obj_endPoint, 0, 0);
            break;
        case "up":
            collEndPoint = collision_point(x, y - obj_control._gridSize, obj_endPoint, 0, 0);
            break;
        case "down":
            collEndPoint = collision_point(x, y + obj_control._gridSize, obj_endPoint, 0, 0);
            break;
    }
    
    var angle = point_direction(x, y, collEndPoint.x, collEndPoint.y);
    var inst = instance_create(x, y, obj_bondDrawer);
    inst._angle = angle;
    //draw_sprite_ext(spr_bond, 0, x, y, 1, 1, angle, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check whether ended
var i, currentColl;
currentColl = collision_point(x, y, obj_atom, 0, 0);

for(i = 0; i &lt; ds_list_size(_bondList); i++)
{
    var coll, isValidBond = true, collEndPoint;
    switch(ds_list_find_value(_bondList, i))
    {
        case "left":
            coll = collision_point(x - obj_control._gridSize, y, obj_atom, 0, 0);
            collEndPoint = collision_point(x - obj_control._gridSize, y, obj_endPoint, 0, 0);
            break;
        case "right":
            coll = collision_point(x + obj_control._gridSize, y, obj_atom, 0, 0);
            collEndPoint = collision_point(x + obj_control._gridSize, y, obj_endPoint, 0, 0);
            break;
        case "up":
            coll = collision_point(x, y - obj_control._gridSize, obj_atom, 0, 0);
            collEndPoint = collision_point(x, y - obj_control._gridSize, obj_endPoint, 0, 0);
            break;
        case "down":
            coll = collision_point(x, y + obj_control._gridSize, obj_atom, 0, 0);
            collEndPoint = collision_point(x, y + obj_control._gridSize, obj_endPoint, 0, 0);
            break;
    }
            
    if (collEndPoint != _callingEndPoint)
    {   
        //If the required atom isn't in the list of bonded atoms for teh current one
        if ((coll &gt; 0) &amp;&amp; (currentColl &gt; 0))
        {
            var ind = -1;
            ind = ds_list_find_index(currentColl._immediateBondList, coll.id);
            if (ind &lt; 0)
                isValidBond = false;
        }
            
        if ((coll &gt; 0) &amp;&amp; (isValidBond == true))
            obj_control._winCondition -= 1;
        else
            obj_control._winCondition = 1000;
            
        //Call this function in next bond
        
        collEndPoint._callingEndPoint = id;
        with (collEndPoint)
        {    
            event_perform(ev_other, ev_user0);
        }
    }
}

//Check whether there are no extra bonds in the atom
if (currentColl &gt; 0)
{
    for(i = 0; i &lt; ds_list_size(currentColl._immediateBondList); i++)
    {
        var item = ds_list_find_value(currentColl._immediateBondList, i);
        var endPointCheck = collision_point(item.x, item.y, obj_endPoint, 0, 0);
        if (endPointCheck &lt; 0)
            obj_control._winCondition = 1000;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
